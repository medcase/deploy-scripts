name: Deploy

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      MEDCASE_GITHUB_TOKEN:
        required: true
      SERVICE_NAME:
        required: true
      REGION:
        required: true
      BROKER_URL:
        required: false
      BROKER_TOKEN:
        required: false
    inputs:
      DOCS_BUCKET:
        required: false
        type: string
      DISTRIBUTION:
        required: false
        type: string
      COMMIT_HASH:
        type: string
        required: true
      GIT_TAG:
        type: string
        required: true
      ENVIRONMENT:
        type: string
        required: false

env:
  MEDCASE_GITHUB_TOKEN: ${{ secrets.MEDCASE_GITHUB_TOKEN }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  BROKER_URL: ${{ secrets.BROKER_URL }}
  BROKER_TOKEN: ${{ secrets.BROKER_TOKEN }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
jobs:
  deploy:
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: yarn install
      - run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit short hash
        id: get-short-sha
        run: |
          short=$(echo ${{inputs.COMMIT_HASH}} | rev | cut -c34- | rev)
          echo "::set-output name=short::$short"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          MEDCASE_GITHUB_TOKEN: ${{ secrets.MEDCASE_GITHUB_TOKEN }}
          IMAGE_TAG: latest
          COMMIT_SHORT_HASH: ${{steps.get-short-sha.outputs.short}}
        run: |
          docker build --build-arg ARG_MEDCASE_GITHUB_TOKEN=$MEDCASE_GITHUB_TOKEN -t $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG -t $ECR_REGISTRY/$SERVICE_NAME:$COMMIT_SHORT_HASH -t $ECR_REGISTRY/$SERVICE_NAME:${{inputs.GIT_TAG}} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$SERVICE_NAME --all-tags
          echo "::set-output name=image::$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG:$COMMIT_SHORT_HASH:${{inputs.GIT_TAG}}"
      - name: Force deployment
        run: |
          aws ecs update-service --cluster backend --service $SERVICE_NAME --force-new-deployment

  docs:
    needs: deploy
    if: ${{inputs.DOCS_BUCKET != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: yarn install
      - run: yarn docs

      - name: sync
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{inputs.DOCS_BUCKET}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{secrets.REGION}}
          SOURCE_DIR: dist/docs
          DEST_DIR: docs
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{inputs.DISTRIBUTION}}
          PATHS: '/*'
          AWS_REGION: ${{secrets.REGION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  contracts:
    needs: deploy
    if: ${{env.BROKER_URL != null &&  env.BROKER_TOKEN != null}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: yarn install
      - run: yarn test:contract
      - run: yarn contract:publish
